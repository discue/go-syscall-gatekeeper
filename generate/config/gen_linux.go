package main

//go:generate go run .

import (
	"fmt"

	"github.com/dolmen-go/codegen"
	"github.com/kelseyhightower/envconfig"

	"path/filepath"

	sec "github.com/seccomp/libseccomp-golang"
)

const tmpl = `// Code generated by generate/config/gen.go; DO NOT EDIT.

package config

const GatekeeperLivenessCheckHttpEnabled = {{ printf "%t" .gatekeeperHttpEnabled }}
const GatekeeperLivenessCheckHttpProbeIntervalSeconds = {{ printf "%d" .gatekeeperHttpProbeSeconds }}
const GatekeeperLivenessCheckLogEnabled = {{ printf "%t" .gatekeeperLogEnabled }}
const GatekeeperLivenessCheckLogSearchString = "{{ printf "%s" .gatekeeperLogSearchString }}"

const SyscallsDelayEnforceUntilCheck = {{ printf "%t" .delayEnforcement }}
const SyscallsKillTargetIfNotAllowed = {{ printf "%t" .killTarget }}
var SyscallsAllowList = {{ printf "%#v" .allowList }}
`

type SyscallConfig struct {
	SyscallsAllowList              []string `split_words:"true"`
	SyscallsDelayEnforceUntilCheck bool     `split_words:"true" default:"true"`
	SyscallsKillTargetIfNotAllowed bool     `split_words:"true" default:"true"`
}

type GatekeeperConfig struct {
	GatekeeperLivenessCheckHttpEnabled              bool   `split_words:"true" default:"false"`
	GatekeeperLivenessCheckHttpProbeIntervalSeconds int    `split_words:"true" default:"1"`
	GatekeeperLivenessCheckLogEnabled               bool   `split_words:"true" default:"true"`
	GatekeeperLivenessCheckLogSearchString          string `split_words:"true" default:"Server running at"`
}

type Config struct {
	GatekeeperConfig
	SyscallConfig
}

func main() {
	var c Config
	err := envconfig.Process("GATEKEEPER", &c)
	if err != nil {
		panic(fmt.Sprintf("unable to read environment configuration %s", err.Error()))
	}

	syscalls := createSyscallMap(c.SyscallsAllowList)

	fmt.Printf("%#v", c)
	p, _ := filepath.Abs("../../app/buildtime-config/syscalls.go")

	err = codegen.MustParse(tmpl).CreateFile(
		p,
		map[string]any{
			"gatekeeperHttpEnabled":      c.GatekeeperLivenessCheckHttpEnabled,
			"gatekeeperHttpProbeSeconds": c.GatekeeperLivenessCheckHttpProbeIntervalSeconds,
			"gatekeeperLogEnabled":       c.GatekeeperLivenessCheckLogEnabled,
			"gatekeeperLogSearchString":  c.GatekeeperLivenessCheckLogSearchString,
			"delayEnforcement":           c.SyscallsDelayEnforceUntilCheck,
			"killTarget":                 c.SyscallsKillTargetIfNotAllowed,
			"allowList":                  syscalls,
		},
	)

	if err != nil {
		panic(fmt.Sprintf("unable to write template %s", err.Error()))
	}
}

func createSyscallMap(syscallAllowList []string) map[string]bool {
	defaultAllowDeny := len(syscallAllowList) == 0
	syscalls := make(map[string]bool)

	// Iterate from 0 to 500 (inclusive)
	for i := 0; i <= 500; i++ {
		// Get syscall name from number
		syscallName, err := sec.ScmpSyscall(int32(i)).GetName()

		// Handle errors gracefully
		if err != nil {
			fmt.Printf("Error getting syscall name for %d: %v\n", i, err)
			continue
		}

		// Add to map with value set to true
		syscalls[syscallName] = defaultAllowDeny
	}

	for _, syscall := range syscallAllowList {
		syscalls[syscall] = !defaultAllowDeny
	}

	return syscalls
}
